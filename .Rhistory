totalcontapp = sum(Continuing.Approvals, na.rm = T),
totalcontden = sum(Continuing.Denials, na.rm = T),
totalinitial = sum((totalinitialapp + totalinitialden), na.rm = T),
totalcontinue = sum((totalcontapp+totalcontden), na.rm = T),
percentiniapp = ((totalinitialapp/totalinitial) ),
percentiniden = (totalinitialden/totalinitial) * 100,
percentcontapp = (totalcontapp/totalcontinue) *100,
percentcontden = (totalcontden/totalcontinue) * 100
)
test <- h1b %>% drop_na(State) %>% group_by(State) %>%
summarise(totalinitialapp = sum(Initial.Approvals, na.rm = T))
head(new)
h1b <- read.csv('h1b_datahubexport_2009-2019.csv')
#h1b <- read.csv('h1b_datahubexport_2009-2019.csv')
str(h1b)
#h1b$State
#nas <- na.omit(h1b$State)
#nas
new <- h1b %>% drop_na(State) %>% group_by(State) %>%
summarise(totalinitialapp = sum(Initial.Approvals, na.rm = T),
totalinitialden = sum(Initial.Denials, na.rm = T),
totalcontapp = sum(Continuing.Approvals, na.rm = T),
totalcontden = sum(Continuing.Denials, na.rm = T),
totalinitial = sum((totalinitialapp + totalinitialden), na.rm = T),
totalcontinue = sum((totalcontapp+totalcontden), na.rm = T),
percentiniapp = ((totalinitialapp/totalinitial) ),
percentiniden = (totalinitialden/totalinitial) * 100,
percentcontapp = (totalcontapp/totalcontinue) *100,
percentcontden = (totalcontden/totalcontinue) * 100
)
test <- h1b %>% drop_na(State) %>%
summarise(totalinitialapp = sum(Initial.Approvals, na.rm = T),
totalinitialden = sum(Initial.Denials, na.rm = T),
totalcontapp = sum(Continuing.Approvals, na.rm = T),
totalcontden = sum(Continuing.Denials, na.rm = T),
totalinitial = sum((totalinitialapp + totalinitialden), na.rm = T),
totalcontinue = sum((totalcontapp+totalcontden), na.rm = T),
percentiniapp = ((totalinitialapp/totalinitial) ),
percentiniden = (totalinitialden/totalinitial) ,
percentcontapp = (totalcontapp/totalcontinue) ,
percentcontden = (totalcontden/totalcontinue)
)
head(test)
#nas <- na.omit(h1b$State)
#nas
new <- h1b %>% drop_na(State) %>% group_by(State) %>%
summarise(totalinitialapp = sum(Initial.Approvals, na.rm = T),
totalinitialden = sum(Initial.Denials, na.rm = T),
totalcontapp = sum(Continuing.Approvals, na.rm = T),
totalcontden = sum(Continuing.Denials, na.rm = T),
totalinitial = sum((totalinitialapp + totalinitialden), na.rm = T),
totalcontinue = sum((totalcontapp+totalcontden), na.rm = T),
percentiniapp = ((totalinitialapp/totalinitial) ),
percentiniden = (totalinitialden/totalinitial) * 100,
percentcontapp = (totalcontapp/totalcontinue) *100,
percentcontden = (totalcontden/totalcontinue) * 100
)
test <- h1b %>% drop_na(State) %>% group_by(Fiscal.Year)
summarise(totalinitialapp = sum(Initial.Approvals, na.rm = T),
totalinitialden = sum(Initial.Denials, na.rm = T),
totalcontapp = sum(Continuing.Approvals, na.rm = T),
totalcontden = sum(Continuing.Denials, na.rm = T),
totalinitial = sum((totalinitialapp + totalinitialden), na.rm = T),
totalcontinue = sum((totalcontapp+totalcontden), na.rm = T),
percentiniapp = ((totalinitialapp/totalinitial) ),
percentiniden = (totalinitialden/totalinitial) ,
percentcontapp = (totalcontapp/totalcontinue) ,
percentcontden = (totalcontden/totalcontinue)
)
#nas <- na.omit(h1b$State)
#nas
new <- h1b %>% drop_na(State) %>% group_by(State) %>%
summarise(totalinitialapp = sum(Initial.Approvals, na.rm = T),
totalinitialden = sum(Initial.Denials, na.rm = T),
totalcontapp = sum(Continuing.Approvals, na.rm = T),
totalcontden = sum(Continuing.Denials, na.rm = T),
totalinitial = sum((totalinitialapp + totalinitialden), na.rm = T),
totalcontinue = sum((totalcontapp+totalcontden), na.rm = T),
percentiniapp = ((totalinitialapp/totalinitial) ),
percentiniden = (totalinitialden/totalinitial) * 100,
percentcontapp = (totalcontapp/totalcontinue) *100,
percentcontden = (totalcontden/totalcontinue) * 100
)
test <- h1b %>% drop_na(State) %>% group_by(State)
summarise(totalinitialapp = sum(Initial.Approvals, na.rm = T),
totalinitialden = sum(Initial.Denials, na.rm = T),
totalcontapp = sum(Continuing.Approvals, na.rm = T),
totalcontden = sum(Continuing.Denials, na.rm = T),
totalinitial = sum((totalinitialapp + totalinitialden), na.rm = T),
totalcontinue = sum((totalcontapp+totalcontden), na.rm = T),
percentiniapp = ((totalinitialapp/totalinitial) ),
percentiniden = (totalinitialden/totalinitial) ,
percentcontapp = (totalcontapp/totalcontinue) ,
percentcontden = (totalcontden/totalcontinue)
)
#nas <- na.omit(h1b$State)
#nas
new <- h1b %>% drop_na(State) %>% group_by(State) %>%
summarise(totalinitialapp = sum(Initial.Approvals, na.rm = T),
totalinitialden = sum(Initial.Denials, na.rm = T),
totalcontapp = sum(Continuing.Approvals, na.rm = T),
totalcontden = sum(Continuing.Denials, na.rm = T),
totalinitial = sum((totalinitialapp + totalinitialden), na.rm = T),
totalcontinue = sum((totalcontapp+totalcontden), na.rm = T),
percentiniapp = ((totalinitialapp/totalinitial) ),
percentiniden = (totalinitialden/totalinitial) * 100,
percentcontapp = (totalcontapp/totalcontinue) *100,
percentcontden = (totalcontden/totalcontinue) * 100
)
test <- h1b %>% drop_na(State) %>% group_by(State) %>%
summarise(totalinitialapp = sum(Initial.Approvals, na.rm = T),
totalinitialden = sum(Initial.Denials, na.rm = T),
totalcontapp = sum(Continuing.Approvals, na.rm = T),
totalcontden = sum(Continuing.Denials, na.rm = T),
totalinitial = sum((totalinitialapp + totalinitialden), na.rm = T),
totalcontinue = sum((totalcontapp+totalcontden), na.rm = T),
percentiniapp = ((totalinitialapp/totalinitial) ),
percentiniden = (totalinitialden/totalinitial) ,
percentcontapp = (totalcontapp/totalcontinue) ,
percentcontden = (totalcontden/totalcontinue)
)
head(test)
#nas <- na.omit(h1b$State)
#nas
new <- h1b %>% drop_na(State) %>% group_by(State) %>%
summarise(totalinitialapp = sum(Initial.Approvals, na.rm = T),
totalinitialden = sum(Initial.Denials, na.rm = T),
totalcontapp = sum(Continuing.Approvals, na.rm = T),
totalcontden = sum(Continuing.Denials, na.rm = T),
totalinitial = sum((totalinitialapp + totalinitialden), na.rm = T),
totalcontinue = sum((totalcontapp+totalcontden), na.rm = T),
percentiniapp = ((totalinitialapp/totalinitial) ),
percentiniden = (totalinitialden/totalinitial) * 100,
percentcontapp = (totalcontapp/totalcontinue) *100,
percentcontden = (totalcontden/totalcontinue) * 100
)
test <- h1b %>% drop_na(State) %>% group_by(NAICS) %>%
summarise(totalinitialapp = sum(Initial.Approvals, na.rm = T),
totalinitialden = sum(Initial.Denials, na.rm = T),
totalcontapp = sum(Continuing.Approvals, na.rm = T),
totalcontden = sum(Continuing.Denials, na.rm = T),
totalinitial = sum((totalinitialapp + totalinitialden), na.rm = T),
totalcontinue = sum((totalcontapp+totalcontden), na.rm = T),
percentiniapp = ((totalinitialapp/totalinitial) ),
percentiniden = (totalinitialden/totalinitial) ,
percentcontapp = (totalcontapp/totalcontinue) ,
percentcontden = (totalcontden/totalcontinue)
)
head(test)
#nas <- na.omit(h1b$State)
#nas
new <- h1b %>% drop_na(State) %>% group_by(State) %>%
summarise(totalinitialapp = sum(Initial.Approvals, na.rm = T),
totalinitialden = sum(Initial.Denials, na.rm = T),
totalcontapp = sum(Continuing.Approvals, na.rm = T),
totalcontden = sum(Continuing.Denials, na.rm = T),
totalinitial = sum((totalinitialapp + totalinitialden), na.rm = T),
totalcontinue = sum((totalcontapp+totalcontden), na.rm = T),
percentiniapp = ((totalinitialapp/totalinitial) ),
percentiniden = (totalinitialden/totalinitial) * 100,
percentcontapp = (totalcontapp/totalcontinue) *100,
percentcontden = (totalcontden/totalcontinue) * 100
)
test <- h1b %>% drop_na(State) %>% group_by(NAICS)
head(test)
#nas <- na.omit(h1b$State)
#nas
new <- h1b %>% drop_na(State) %>% group_by(State) %>%
summarise(totalinitialapp = sum(Initial.Approvals, na.rm = T),
totalinitialden = sum(Initial.Denials, na.rm = T),
totalcontapp = sum(Continuing.Approvals, na.rm = T),
totalcontden = sum(Continuing.Denials, na.rm = T),
totalinitial = sum((totalinitialapp + totalinitialden), na.rm = T),
totalcontinue = sum((totalcontapp+totalcontden), na.rm = T),
percentiniapp = ((totalinitialapp/totalinitial) ),
percentiniden = (totalinitialden/totalinitial) * 100,
percentcontapp = (totalcontapp/totalcontinue) *100,
percentcontden = (totalcontden/totalcontinue) * 100
)
test <- h1b %>% drop_na(State) %>% group_by(Fiscal.Year)
head(test)
#nas <- na.omit(h1b$State)
#nas
new <- h1b %>% drop_na(State) %>% group_by(State) %>%
summarise(totalinitialapp = sum(Initial.Approvals, na.rm = T),
totalinitialden = sum(Initial.Denials, na.rm = T),
totalcontapp = sum(Continuing.Approvals, na.rm = T),
totalcontden = sum(Continuing.Denials, na.rm = T),
totalinitial = sum((totalinitialapp + totalinitialden), na.rm = T),
totalcontinue = sum((totalcontapp+totalcontden), na.rm = T),
percentiniapp = ((totalinitialapp/totalinitial) ),
percentiniden = (totalinitialden/totalinitial) * 100,
percentcontapp = (totalcontapp/totalcontinue) *100,
percentcontden = (totalcontden/totalcontinue) * 100
)
test <- h1b %>% drop_na(State) %>% group_by(Fiscal.Year) %>%
summarise(totalinitialapp = sum(Initial.Approvals, na.rm = T),
totalinitialden = sum(Initial.Denials, na.rm = T),
totalcontapp = sum(Continuing.Approvals, na.rm = T),
totalcontden = sum(Continuing.Denials, na.rm = T),
totalinitial = sum((totalinitialapp + totalinitialden), na.rm = T),
totalcontinue = sum((totalcontapp+totalcontden), na.rm = T),
percentiniapp = ((totalinitialapp/totalinitial) ),
percentiniden = (totalinitialden/totalinitial) ,
percentcontapp = (totalcontapp/totalcontinue) ,
percentcontden = (totalcontden/totalcontinue)
)
head(test)
#nas <- na.omit(h1b$State)
#nas
new <- h1b %>% drop_na(State) %>% group_by(State) %>%
summarise(totalinitialapp = sum(Initial.Approvals, na.rm = T),
totalinitialden = sum(Initial.Denials, na.rm = T),
totalcontapp = sum(Continuing.Approvals, na.rm = T),
totalcontden = sum(Continuing.Denials, na.rm = T),
totalinitial = sum((totalinitialapp + totalinitialden), na.rm = T),
totalcontinue = sum((totalcontapp+totalcontden), na.rm = T),
percentiniapp = ((totalinitialapp/totalinitial) ),
percentiniden = (totalinitialden/totalinitial) * 100,
percentcontapp = (totalcontapp/totalcontinue) *100,
percentcontden = (totalcontden/totalcontinue) * 100
)
test <- h1b %>% drop_na(State) %>% group_by(State)
head(test)
state_approval <- state_lo %>% select(long, lat, group, order, State, totalinitialapp, percentiniapp, State_name)
head(state_approval)
testLogit <- glm(percentiniapp ~  long + lat + State, data = state_approval, family = "binomial")
#nas <- na.omit(h1b$State)
#nas
new <- h1b %>% drop_na(State) %>% group_by(State) %>%
summarise(totalinitialapp = sum(Initial.Approvals, na.rm = T),
totalinitialden = sum(Initial.Denials, na.rm = T),
totalcontapp = sum(Continuing.Approvals, na.rm = T),
totalcontden = sum(Continuing.Denials, na.rm = T),
totalinitial = sum((totalinitialapp + totalinitialden), na.rm = T),
totalcontinue = sum((totalcontapp+totalcontden), na.rm = T),
percentiniapp = ((totalinitialapp/totalinitial) ),
percentiniden = (totalinitialden/totalinitial) ,
percentcontapp = (totalcontapp/totalcontinue),
percentcontden = (totalcontden/totalcontinue)
)
test <- h1b %>% drop_na(State) %>% group_by(State)
head(test)
newLogit <- glm(percentiniapp ~  State, data = new, family = "binomial")
summary(testLogit)
newLogit <- glm(percentiniapp ~  State, data = new, family = "binomial")
summary(newLogit)
usstate <- map_data("state")
copy <- map_data("state")
colnames(usstate)[colnames(usstate)=="region"] <- "State_name"
usstate <- usstate %>% mutate(State = state2abbr(State_name))
new$State <- as.character(new$State)
state_lo <- inner_join(usstate, new, by = "State")
state_lo <- state_lo[state_lo$State %in%state.abb,]
head(state_lo)
state_approval <- state_lo %>% select(long, lat, group, order, State, totalinitialapp, percentiniapp, State_name)
head(state_approval)
newLogit <- glm(percentiniapp ~  long + lat + State, data = new, family = "binomial")
newLogit <- glm(percentiniapp ~  long + lat + State, data = state_approval, family = "binomial")
summary(newLogit)
newLogit <- lm(percentiniapp ~  long + lat + State, data = state_approval)
summary(newLogit)
h1b$AllIni <- h1b$Initial.Approvals + h1b$Initial.Denials
h1b$IniPer <- h1b$Initial.Approvals / h1b$AllIni
h1b$NAICS <- as.factor(h1b$NAICS)
h1b$AllIni <- h1b$Initial.Approvals + h1b$Initial.Denials
h1b$IniPer <- h1b$Initial.Approvals / h1b$AllIni
h1b$NAICS <- as.factor(h1b$NAICS)
h1b$IniPer[is.na(h1b$IniPer)] <- 0
testlm <- lm(IniPer ~ Fiscal.Year + NAICS + State, data = h1b)
summary(testlm)
h1bcor <- cor(h1b)
# knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(include = F)
options(scientific=T, digits = 3)
#options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
summary(mtcars)
str(mtcars)
head(mtcars)
mtcarscor = cor(mtcars) # get the correlation matrix between all numerical variables.
mtcarscor
vif(testlm)
loadPkg("car")
vif(testlm)
fit1 <- lm(mpg ~ wt, data = mtcars)
summary(fit1)
vif(fit1)
fit2 <- lm(mpg ~ wt+disp, data = mtcars)
summary(fit2)
vif(fit2)
plot(fit1)
loadPkg("car")
vif(testlm)
plot(testlm)
mtcars2 = mtcars
# check the meaning for each variable
help(mtcars) # 32 observations, 11 variables
mtcars2$cyl = factor(mtcars2$cyl)
mtcars2$gear = factor(mtcars2$gear)
mtcars2$vs = factor(mtcars2$vs) # v-shape (0) or inline (1)
mtcars2$am = factor(mtcars2$am) # transmission (0-automatic, 1-manual)
str(mtcars2)
fitcat1 = lm(mpg ~ wt + cyl, data = mtcars2)
summary(fitcat1)
fitcat2 = lm(mpg ~ wt+cyl + gear, data = mtcars2)
summary(fitcat2)
fitcatNR = lm(mpg ~ wt+cyl + wt:cyl + cyl:gear, data = mtcars2)
summary(fitcatNR)
lm1 <- lm(IniPer ~ State, data = h1b)
summary(lm1)
lm1 <- lm(IniPer ~ State + NAICS, data = h1b)
summary(lm1)
lm1 <- lm(IniPer ~ NAICS, data = h1b)
summary(lm1)
lm1 <- lm(IniPer ~ Fiscal.Year, data = h1b)
summary(lm1)
lm1 <- lm(IniPer ~ Fiscal.Year + NAICS, data = h1b)
summary(lm1)
lm1 <- lm(IniPer ~ Fiscal.Year + State, data = h1b)
summary(lm1)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(warning = F, results = F, message = F)
# knitr::opts_chunk$set(echo = TRUE)
# options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
loadPkg("ISLR")
loadPkg("tree")
attach(Hitters)
# remove NA values
Hitters <- na.omit(Hitters)
Salary <- na.omit(Salary)
# put salary on log scale and fit reg. tree
treefit <- tree(log(Salary) ~ Years + Hits, data=Hitters)
summary(treefit)
plot(treefit)
text(treefit,cex=0.75)
my.tree = tree(Salary  ~ Years + Hits, data=Hitters) # Fits tree
prune.tree(my.tree,best=5) # Returns best pruned tree
prune.tree(my.tree,best=5, newdata=Hitters)  # no test data set, so use training data
my.tree.seq = prune.tree(my.tree) # Sequence of pruned
# tree sizes/errors
plot(my.tree.seq) # Plots size vs. error
my.tree.seq$dev # Vector of error
# rates for prunings, in order
opt.trees = which(my.tree.seq$dev == min(my.tree.seq$dev))
# Positions of
# optimal (with respect to error) trees
min(my.tree.seq$size[opt.trees])
# Size of smallest optimal tree
fold <- floor(runif(nrow(Hitters),1,11))
Hitters$fold <- fold
## the test set is just the first fold
test.set <- Hitters[Hitters$fold == 1,]
##exclude the first fold from the data here
train.set <- Hitters[Hitters$fold != 1,]
my.tree <- tree(log(Salary) ~ Years + Hits,data=train.set, mindev=0.001)
# Return best pruned tree with 5 leaves,
# evaluating error on training data
prune.tree(my.tree, best=5)
# Ditto, but evaluates on test.set
prune.tree(my.tree,best=5,newdata=test.set)
# Sequence of pruned tree sizes/errors
my.tree.seq = prune.tree(my.tree)
plot(my.tree.seq) # error versus plot size
# Vector of error rates
#for prunings, in order
my.tree.seq$dev
loadPkg("rpart") # Classification trees, rpart(formula, data=, method=,control=)
loadPkg("ISLR")
loadPkg("tree")
h1b <- na.omit(h1b)
# put salary on log scale and fit reg. tree
treefit1 <- tree(IniPer ~ NAICS + Fiscal.Year + State, data=h1b)
loadPkg("rpart") # Classification trees, rpart(formula, data=, method=,control=)
loadPkg("ISLR")
loadPkg("tree")
h1b <- na.omit(h1b)
# put salary on log scale and fit reg. tree
treefit1 <- tree(IniPer ~ Fiscal.Year + State, data=h1b)
loadPkg("rpart") # Classification trees, rpart(formula, data=, method=,control=)
loadPkg("ISLR")
loadPkg("tree")
h1b <- na.omit(h1b)
# put salary on log scale and fit reg. tree
treefit1 <- tree(IniPer ~ Fiscal.Year, data=h1b)
summary(treefit1)
loadPkg("rpart") # Classification trees, rpart(formula, data=, method=,control=)
loadPkg("ISLR")
loadPkg("tree")
h1b <- na.omit(h1b)
# put salary on log scale and fit reg. tree
treefit1 <- tree(IniPer ~ NAICS, data=h1b)
summary(treefit1)
# put salary on log scale and fit reg. tree
treefit1 <- tree(IniPer ~ NAICS + Fiscal.Year, data=h1b)
summary(treefit1)
plot(treefit1)
# put salary on log scale and fit reg. tree
treefit1 <- tree(IniPer ~ NAICS, data=h1b)
summary(treefit1)
plot(treefit1)
# put salary on log scale and fit reg. tree
treefit1 <- tree(IniPer ~ Fiscal.Year, data=h1b)
summary(treefit1)
str(h1b)
# put salary on log scale and fit reg. tree
treefit1 <- tree(IniPer ~ Fiscal.Year, data=h1b)
summary(treefit1)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(include = T)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
pizza <- read.csv("Pizza.csv")
str(pizza)
head(pizza)
sum(is.na(pizza))
str(h1b)
# put salary on log scale and fit reg. tree
treefit1 <- tree(Initial.Approval ~ Fiscal.Year, data=h1b)
str(h1b)
# put salary on log scale and fit reg. tree
treefit1 <- tree(Initial.Approvals ~ Fiscal.Year, data=h1b)
summary(treefit1)
str(h1b)
# put salary on log scale and fit reg. tree
treefit1 <- tree(Initial.Approvals ~ Fiscal.Year + NAICS, data=h1b)
summary(treefit1)
pca.out <- prcomp(dfpca, scale = TRUE)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(include = T)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
# can add quietly=T option to the require() function
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
pizza <- read.csv("Pizza.csv")
str(pizza)
head(pizza)
sum(is.na(pizza))
shapiro.test(pizza$id)
shapiro.test(pizza$mois)
shapiro.test(pizza$prot)
shapiro.test(pizza$fat)
shapiro.test(pizza$ash)
shapiro.test(pizza$sodium)
shapiro.test(pizza$carb)
shapiro.test(pizza$cal)
dfpca <- pizza[3:9]
str(dfpca)
dplyr::sample_n(dfpca, 5)
pca.out <- prcomp(dfpca, scale = TRUE)
pca.out.nc <- prcomp(dfpca, scale = FALSE)
summary(pca.out)
pca.out$rotation
h1b$AllCon <- h1b$Continuing.Approvals + h1b$Continuing.Denials
h1b$ConPer <- h1b$Continuing.Approvals / h1b$AllCon
dfh1b <- h1b[1, 3:6, 12:15]
h1b$AllCon <- h1b$Continuing.Approvals + h1b$Continuing.Denials
h1b$ConPer <- h1b$Continuing.Approvals / h1b$AllCon
dfh1b <- h1b[1, 3:6, 12:15]
str(dfh1b)
h1b$AllCon <- h1b$Continuing.Approvals + h1b$Continuing.Denials
h1b$ConPer <- h1b$Continuing.Approvals / h1b$AllCon
dfh1b <- h1b[3:6, 12:15]
str(dfh1b)
h1b$AllCon <- h1b$Continuing.Approvals + h1b$Continuing.Denials
h1b$ConPer <- h1b$Continuing.Approvals / h1b$AllCon
dfh1b <- h1b %>% select("Fiscal.Year")
str(dfh1b)
h1b$AllCon <- h1b$Continuing.Approvals + h1b$Continuing.Denials
h1b$ConPer <- h1b$Continuing.Approvals / h1b$AllCon
dfh1b <- h1b %>% select("Fiscal.Year", "Initial.Approvals", Initial.Denials, Continuing.Approvals, Continuing.Denials, AllIni, IniPer, AllCon, ConPer)
str(dfh1b)
h1b$AllCon <- h1b$Continuing.Approvals + h1b$Continuing.Denials
h1b$ConPer <- h1b$Continuing.Approvals / h1b$AllCon
dfh1b <- h1b %>% select(Fiscal.Year, Initial.Approvals, Initial.Denials, Continuing.Approvals, Continuing.Denials, AllIni, IniPer, AllCon, ConPer)
str(dfh1b)
dfpca.out <- prcomp(dfh1b, scale = TRUE)
h1b$AllCon <- h1b$Continuing.Approvals + h1b$Continuing.Denials
h1b$ConPer <- h1b$Continuing.Approvals / h1b$AllCon
h1b$ConPer[is.na(h1b$ConPer)] <- 0
dfh1b <- h1b %>% select(Fiscal.Year, Initial.Approvals, Initial.Denials, Continuing.Approvals, Continuing.Denials, AllIni, IniPer, AllCon, ConPer)
str(dfh1b)
dfpca.out <- prcomp(dfh1b, scale = TRUE)
dfpca.out.nc <- prcomp(dfh1b, scale = FALSE)
summary(dfpca.out)
dfpca.out$rotation
summary(dfpca.out.nc)
dfpca.out.nc$rotation
pca.var <- (dfpca.out$sdev^2)
pve <- pca.var/sum(pca.var)
plot(cumsum(pve), xlab="Principal Component (standardized)", ylab ="Cumulative Proportion of Variance Explained",ylim=c(0,1),type="b", main = "Standardized")
pca.var.nc <- (dfpca.out.nc$sdev^2)
pve.nc <- pca.var.nc/sum(pca.var.nc)
plot(cumsum(pve.nc), xlab="Principal Component (non-standardized)", ylab ="Cumulative Proportion of Variance Explained",ylim=c(0,1),type="b", main = "Non-standardized")
biplot(dfpca.out,1:2, scale =0)
biplot(dfpca.out.nc,1:2, scale =0)
pca.var <- (dfpca.out$sdev^2)
pve <- pca.var/sum(pca.var)
plot(cumsum(pve), xlab="Principal Component (standardized)", ylab ="Cumulative Proportion of Variance Explained",ylim=c(0,1),type="b", main = "Standardized")
