h1b <- read.csv('H1B_2015-2019.csv')
str(h1b)
#h1b$State
library(dplyr)
library(tidyr)
N11 <- hib %>% filter(NAICS = 11)
N11 <- h1b %>% filter(NAICS = 11)
N11 <- h1b %>% filter(NAICS == 11)
N11
N11 <- h1b %>% filter(NAICS == 11)
N11 %>% order(Initial.Approvals)
knitr::opts_chunk$set(echo = TRUE)
bikeOrig <- read.csv("bikedata.csv")
head(bikeOrig, 5)
bikeOrig = read.csv("bikedata.csv")
head(bikeOrig, 5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
bike <- bikeOrig %>% select(-Date)
View(bike)
Q2 <- bike %>% filter(Hour = c(14-17), Day.of.the.Week = c(1-5))
Q2 <- bike %>% filter(Hour = c(14:17), Day.of.the.Week = c(1:5))
Q2 <- bike %>% filter(Hour >= 14, Hour <= 17, Day.of.the.Week >= 1, Day.of.the.Week <= 5)
Q2 <- bike %>% filter(Hour >= 14, Hour <= 17, Day.of.the.Week >= 1, Day.of.the.Week <= 5)
str(Q2)
View(Q2)
bikeRush <- bike %>% filter(Hour >= 14, Hour <= 17, Day.of.the.Week >= 1, Day.of.the.Week <= 5)
str(bikeRush)
bikeRushNumeric <- bikeRush %>% select(Temperature.F, Temperature.Feels.F, Humidity, Wind.Speed, Total.Users)
cor(bikeRushNumeric)
Q5 <- lm(Total.Users ~ Temperature.F, data = bikeRushNumeric)
Q5
Q5 <- lm(Total.Users ~ Temperature.F, data = bikeRushNumeric)
Q5
summary(Q5)
cor(bikeRushNumeric)
library(corrplot)
corrplot(bikeRushNumeric)
cor(bikeRushNumeric)
library(corrplot)
corrplot.mixed(bikeRushNumeric)
corrplot.mixed(bikeRushNumeric, method = circle)
corrplot.mixed(bikeRushNumeric)
corrplot.mixed(Q4)
Q4 <- cor(bikeRushNumeric)
library(corrplot)
corrplot.mixed(Q4)
corrplot.mixed(Q4)
corrplot(Q4)
corrplot(Q4)
corrplot(Q4, method = "number")
Q4
corrplot(Q4)
corrplot(Q4, method = "number")
Q5 <- lm(Total.Users ~ Temperature.F, data = bikeRushNumeric)
#Q5
summary(Q5)
Q5 <- lm(Total.Users ~ Temperature.F, data = bikeRushNumeric)
#Q5
summary(Q5)
Q6a <- lm(Total.Users ~ Temperature.F + Temperature.Feels.F, data = bikeRushNumeric)
summary(Q6a)
Q6a <- lm(Total.Users ~ Temperature.F + Temperature.Feels.F, data = bikeRushNumeric)
summary(Q6a)
vif(Q6a)
Q6a <- lm(Total.Users ~ Temperature.F + Temperature.Feels.F, data = bikeRushNumeric)
summary(Q6a)
VIF(Q6a)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(car)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
install.packages(car)
library(car)
install.packages(car)
#library(car)
vif(Q6a)
install.packages("VIF")
#library(car)
vif(Q6a)
#install.packages("VIF")
library(VIF)
VIF(Q6a)
#install.packages("VIF")
library(VIF)
vif(Q6a)
install.packages("car")
library(car)
vif(Q6a)
install.packages("car")
library(car)
#install.packages("car")
library(car)
vif(Q6a)
Q6b <- lm(Total.Users ~ Temperature.F + Temperature.Feels.F + Humidity, data = bikeRushNumeric)
summary(Q6b)
vif(Q6b)
Q6c <- lm(Total.Users ~ Temperature.F + Temperature.Feels.F + Humidity + Wind.Speed, data = bikeRushNumeric)
summary(Q6c)
vif(Q6c)
Q7 <- aov(Q5, Q6a, Q6b, Q6c)
Q7 <- anova(Q5, Q6a, Q6b, Q6c)
Q7
Q8 <- lm(Total.Users ~ Temperature.F*Humidity, data = bikeRushNumeric)
summary(Q8)
Q8 <- lm(Total.Users ~ Temperature.F*Humidity^2, data = bikeRushNumeric)
summary(Q8)
Q8 <- lm(Total.Users ~ (Temperature.F+Humidity)^2, data = bikeRushNumeric)
summary(Q8)
Q8 <- lm(Total.Users ~ (Temperature.Feels.F+Humidity)^2, data = bikeRushNumeric)
summary(Q8)
Q8 <- lm(Total.Users ~ (Temperature.F+Humidity)^2, data = bikeRushNumeric)
summary(Q8)
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(include = F)
#options(scientific=T, digits = 3)
#options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
# can add quietly=T option to the require() function
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# loadPkg("dplyr")
# loadPkg("tidyr")
# loadPkg("tidyverse")
loadPkg("ggplot2")
# loadPkg("Rmisc")  # CI function for confidence interval, single vector
#For this example we are going to use data from the faraway library from the package with the same name.
loadPkg("faraway")
#The data set is stat500, so let's take a look
str(stat500)
#Determine whether midterm and homework grades predict the final
model.final <- lm(final~midterm+hw,data=stat500)
summary(model.final)
coef(model.final)
confint(model.final)
stat500s = stat500
stat500s$midterm = stat500$midterm * 1000000
stat500s$hw = stat500$hw / 1000000
#Determine whether midterm and homework grades predict the final
models.final <- lm(final~midterm+hw,data=stat500s)
summary(models.final)
coef(models.final)
confint(models.final)
#Data grid is a function inside the grid package that is a useful tool for creating graphics
loadPkg("modelr")
model.final.pred <- add_predictions(stat500,model.final)
head(model.final.pred)
loadPkg("ggplot2")
ggplot(model.final.pred,aes(final,pred))+geom_point(aes(final,pred))+geom_line(aes(pred), colour="red", size=1)
# We can also add the residuals
model.final.pred <- add_residuals(model.final.pred,model.final)
head(model.final.pred)
ggplot(model.final.pred, aes(resid))+geom_freqpoly(binwidth=.05)
loadPkg("broom")
#tidy will create a dataframe of our results
tidyfinal <-  tidy(model.final)
tidyfinal
#augment will add the model output
Model_Summary <- augment(model.final)
str(Model_Summary)
head(Model_Summary)
loadPkg("stats")
predict(model.final,data.frame(midterm=c(25,52,78),hw=c(20,80,45)))
summary(mtcars)
str(mtcars)
head(mtcars)
mtcarscor = cor(mtcars) # get the correlation matrix between all numerical variables.
mtcarscor
loadPkg("corrplot")
corrplot(mtcarscor)
corrplot(mtcarscor, method = "square") # try "circle", "square", "ellipse", "number", "shade", "color", "pie"
corrplot(mtcarscor, method = "number")
corrplot(mtcarscor, method = "number", type="upper")
corrplot.mixed(mtcarscor)
loadPkg("lattice") # lattice and ggplot2 combined allow us to use the "pairs" function below
pairs(mtcars[1:10])
# summary(mtcars)
fit1 <- lm(mpg ~ wt, data = mtcars)
summary(fit1)
vif(fit1)
plot(fit1)
fit2 <- lm(mpg ~ wt+disp, data = mtcars)
summary(fit2)
vif(fit2)
plot(fit2)
fit3 <- lm(mpg ~ wt+disp+cyl, data = mtcars)
summary(fit3)
vif(fit3)
plot(fit3)
fit4 <- lm(mpg ~ wt+disp+cyl+hp, data = mtcars)
summary(fit4)
vif(fit4)
plot(fit4)
Q8 <- lm(Total.Users ~ (Temperature.F + Temperature.Feels.F +Humidity)^2, data = bikeRushNumeric)
summary(Q8)
